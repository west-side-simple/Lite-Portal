-- —Å–∫—Ä–∞–ø–µ—Ä TVS –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ —Å —Å–∞–π—Ç–∞ https://filmix.ac
-- author west_side (06/08/23)

	module('filmix_generator_pls', package.seeall)
	local my_src_name = 'Filmix Playlists'
	local filmixsite = 'https://filmix.ac'

	function GetSettings()
	 return {name = my_src_name, sortname = '', scraper = '', m3u = 'out_' .. my_src_name .. '.m3u', logo = 'https://filmix.ac/templates/Filmix/media/img/favicon.ico', TypeSource = 1, TypeCoding = 1, DeleteM3U = 0, RefreshButton = 0, AutoBuild = 0, AutoBuildDay = {0, 0, 0, 0, 0, 0, 0}, LastStart = 0, TVS = {add = 0, FilterCH = 0, FilterGR = 0,GetGroup = 0, LogoTVG = 0}, STV = {add = 1, ExtFilter = 1, FilterCH = 0, FilterGR = 0, GetGroup = 1, HDGroup = 0, AutoSearch = 0, AutoSearchLogo =1, AutoNumber = 0, NumberM3U = 0, GetSettings = 1, NotDeleteCH = 1, TypeSkip = 0, TypeFind = 1, TypeMedia = 3}}
	end

	function GetVersion()
	 return 2, 'UTF-8'
	end
	local host = 'https://filmix.ac'
	local sessionFilmix = m_simpleTV.Http.New('Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36', prx, false)
	if not sessionFilmix then return end
		m_simpleTV.Http.SetTimeout(sessionFilmix, 600000)
	if not m_simpleTV.User then
		m_simpleTV.User = {}
	end
	if not m_simpleTV.User.filmix then
		m_simpleTV.User.filmix = {}
	end
	if not m_simpleTV.User.filmix.cookies then
		local res, login, password, header = xpcall(function() require('pm') return pm.GetPassword('filmix') end, err)
		if not login or not password or login == '' or password == '' then
			login = decode64('bWV2YWxpbA')
			password = decode64('bTEyMzQ1Ng')
		end
		local rc, answer = m_simpleTV.Http.Request(sessionFilmix, {body = 'login_name=' .. m_simpleTV.Common.toPercentEncoding(login) .. '&login_password=' .. m_simpleTV.Common.toPercentEncoding(password) .. '&login=submit', url = host, method = 'post', headers = 'Content-Type: application/x-www-form-urlencoded; charset=UTF-8\nX-Requested-With: XMLHttpRequest\nReferer: ' .. host})
		m_simpleTV.User.filmix.cookies = m_simpleTV.Http.GetCookies(sessionFilmix,host)
	end
	local function LoadFromPage(playlist,pls_name,sessionFilmix)
	local t1,t2
	local str, page = '', 1
	if page == 1 then t1=os.time() end
	local txt = 'üé• Filmix: ' .. pls_name
	local page_type
	if playlist:match('playlist/') then page_type = '/page/' else page_type = '/pages/' end
	while true do
		local filmixurl = 'https://filmix.ac/' .. playlist .. page_type .. page .. '/'
		local rc, filmixanswer = m_simpleTV.Http.Request(sessionFilmix, {url = filmixurl:gsub('/page/1/',''):gsub('/pages/1/','')})
		if rc ~= 200
			then
				m_simpleTV.Common.Sleep(30000)
			else
				filmixanswer = m_simpleTV.Common.multiByteToUTF8(filmixanswer)
				str = str .. filmixanswer:gsub('\n', ' ')
				if filmixanswer:match(page_type .. (page + 1) .. '/"')
					then

						m_simpleTV.OSD.ShowMessageT({imageParam = 'vSizeFactor="1.0" src="' .. m_simpleTV.Common.GetMainPath(2) .. './luaScr/user/westSide/icons/filmini.png"', text = ' ' .. txt .. ' (' .. page .. ')', color = ARGB(255, 127, 63, 255), showTime = 1000 * 60})
						page = page + 1
					else
						t2=os.time()
						m_simpleTV.OSD.ShowMessageT({imageParam = 'vSizeFactor="1.0" src="' .. m_simpleTV.Common.GetMainPath(2) .. './luaScr/user/westSide/icons/kpmini.png"', text = ' –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ ' .. t2-t1 .. ' —Å–µ–∫. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞', color = ARGB(255, 127, 63, 255), showTime = 1000 * 60})
						return str, txt
				end
		end
		rc, answer = m_simpleTV.Http.Request(sessionFilmix, {body = filmixurl:gsub('/page/1/',''), url = 'https://filmix.ac/api/notifications/get', method = 'post', headers = 'Content-Type: application/x-www-form-urlencoded; charset=UTF-8\nX-Requested-With: XMLHttpRequest\nReferer: ' .. filmixurl:gsub('/page/1/',''):gsub('/pages/1/','') .. '\nCookie:' .. m_simpleTV.User.filmix.cookies })
	end
	end

	local function LoadFromSite(playlist,pls_name,sessionFilmix)
		local t, i = {}, 1
		local name, adr, logo
		local answer, gr = LoadFromPage(playlist,pls_name,sessionFilmix)
			for w in answer:gmatch('<article class="shortstory line" itemscope itemtype="http://schema.org/Movie"(.-)</article>') do
			if w and not w:match('–î–æ–±–∞–≤–ª–µ–Ω–∞%:') then
				name_rus = w:match('itemprop="name" content="(.-)"><a itemprop'):gsub('&amp;', '&')
				year = w:match('<a itemprop="copyrightYear".->(.-)</a>') or 0
				adr = w:match('<a itemprop="url" href="(.-)"')
				logo = w:match('<img src="(.-)"') or ''
				t[i] = {}
				t[i].logo = logo
				t[i].name = name_rus .. ' (' .. year .. ')'
				t[i].address = adr
				t[i].group = gr
			    i = i + 1
			end
			end
	 return t
	end

	function GetList(UpdateID, m3u_file)
			if not UpdateID then return end
			if not m3u_file then return end
			if not TVSources_var.tmp.source[UpdateID] then return end
		local Source = TVSources_var.tmp.source[UpdateID]
		local pll={
		{"filmi/animes","–ê–Ω–∏–º–µ"},
		{"filmi/biografia","–ë–∏–æ–≥—Ä–∞—Ñ–∏—è"},
		{"filmi/boevik","–ë–æ–µ–≤–∏–∫–∏"},
		{"filmi/vesterny","–í–µ—Å—Ç–µ—Ä–Ω"},
		{"filmi/voennyj","–í–æ–µ–Ω–Ω—ã–π"},
		{"filmi/detektivy","–î–µ—Ç–µ–∫—Ç–∏–≤"},
		{"filmi/detskij","–î–µ—Ç—Å–∫–∏–π"},
		{"filmi/for_adults","–î–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö"},
		{"filmi/dokumentalenyj","–î–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ"},
		{"filmi/drama","–î—Ä–∞–º—ã"},
		{"filmi/istoricheskie","–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π"},
		{"filmi/komedia","–ö–æ–º–µ–¥–∏–∏"},
		{"filmi/korotkometragka","–ö–æ—Ä–æ—Ç–∫–æ–º–µ—Ç—Ä–∞–∂–∫–∞"},
		{"filmi/kriminaly","–ö—Ä–∏–º–∏–Ω–∞–ª"},
		{"filmi/melodrama","–ú–µ–ª–æ–¥—Ä–∞–º—ã"},
		{"filmi/mistika","–ú–∏—Å—Ç–∏–∫–∞"},
		{"filmi/music","–ú—É–∑—ã–∫–∞"},
		{"filmi/muzkl","–ú—é–∑–∏–∫–ª"},
		{"filmi/novosti","–ù–æ–≤–æ—Å—Ç–∏"},
		{"filmi/original","–û—Ä–∏–≥–∏–Ω–∞–ª"},
		{"filmi/otechestvennye","–û—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ"},
		{"filmi/tvs","–ü–µ—Ä–µ–¥–∞—á–∏ —Å –¢–í"},
		{"filmi/prikluchenija","–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è"},
		{"filmi/realnoe_tv","–†–µ–∞–ª—å–Ω–æ–µ –¢–í"},
		{"filmi/semejnye","–°–µ–º–µ–π–Ω—ã–π"},
		{"filmi/sports","–°–ø–æ—Ä—Ç"},
		{"filmi/tok_show","–¢–æ–∫-—à–æ—É"},
		{"filmi/triller","–¢—Ä–∏–ª–ª–µ—Ä—ã"},
		{"filmi/uzhasu","–£–∂–∞—Å—ã"},
		{"filmi/fantastiks","–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞"},
		{"filmi/film_noir","–§–∏–ª—å–º-–Ω—É–∞—Ä"},
		{"filmi/fjuntezia","–§—ç–Ω—Ç–µ–∑–∏"},
		{"filmi/engl","–ù–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º"},
		{"filmi/ukraine","–ù–∞ —É–∫—Ä–∞–∏–Ω—Å–∫–æ–º"},
		{"filmi/c64","–°–û–í–ï–¢–°–ö–ò–ï –§–ò–õ–¨–ú–´"},
		{"mults/c64","–°–û–í–ï–¢–°–ö–ò–ï –ú–£–õ–¨–¢–§–ò–õ–¨–ú–´"},
		{"mults/c6","–†–£–°–°–ö–ò–ï –ú–£–õ–¨–¢–§–ò–õ–¨–ú–´"},
		{"mults/c996","–ó–ê–†–£–ë–ï–ñ–ù–´–ï –ú–£–õ–¨–¢–§–ò–õ–¨–ú–´"},
		{"filmi/y1988","–§–∏–ª—å–º—ã 90-—ã—Ö"},
		{"playlist/13559-novogodnie-melodramy","–ù–û–í–û–ì–û–î–ù–ò–ï –ú–ï–õ–û–î–†–ê–ú–´"},
		{"playlist/13674-dushevnye-istorii-o-pervoy-lyubvi","–î–£–®–ï–í–ù–´–ï –ò–°–¢–û–†–ò–ò –û –ü–ï–†–í–û–ô –õ–Æ–ë–í–ò"},
		{"playlist/9984-filmy-proverennye-vremenem","–°–®–ê. –ü–†–û–í–ï–†–ï–ù–û –í–†–ï–ú–ï–ù–ï–ú. –ù–ê–¶–ò–û–ù–ê–õ–¨–ù–û–ï –î–û–°–¢–û–Ø–ù–ò–ï."},
		{"playlist/546-klassika-kino","OLD SCHOOL"},
		{"playlist/5269-kidorg","–§–ò–õ–¨–ú–´ –ò –°–ï–†–ò–ê–õ–´ –ñ–ê–ù–†–ê –ö–ò–ë–ï–†–ü–ê–ù–ö"},
		{"playlist/9964-ves-startrek","–í–ï–°–¨ –°–¢–ê–†–¢–†–ï–ö (–ó–í–ï–ó–î–ù–´–ô –ü–£–¢–¨)"},
		{"playlist/40-luchshie-serialy-21-veka","–õ–£–ß–®–ò–ï –°–ï–†–ò–ê–õ–´ 21 –í–ï–ö–ê"},
		{"playlist/13521-luchshie-novogodnie-i-rozhdestvenskie-multfilmy","–õ–£–ß–®–ò–ï –ù–û–í–û–ì–û–î–ù–ò–ï –ò –†–û–ñ–î–ï–°–¢–í–ï–ù–°–ö–ò–ï –ú–£–õ–¨–¢–§–ò–õ–¨–ú–´"},
		{"playlist/27-national-geographic-dokumentalnye-filmy","NATIONAL GEOGRAPHIC - –î–û–ö–£–ú–ï–ù–¢–ê–õ–¨–ù–´–ï –§–ò–õ–¨–ú–´"},
		{"playlist/2829-v-dalekom-buduschem-v-nashey-galaktike","–í –î–ê–õ–ï–ö–û–ú –ë–£–î–£–©–ï–ú –í –ù–ê–®–ï–ô –ì–ê–õ–ê–ö–¢–ò–ö–ï‚Ä¶"},
}

  local t={}
  for i=1,#pll do
    t[i] = {}
    t[i].Id = i
    t[i].Name = pll[i][2]
    t[i].Action = pll[i][1]
  end

  local playlist, pls_name
  local ret,id = m_simpleTV.OSD.ShowSelect_UTF8('Select playlist',0,t,9000,1+4+8)
  if id==nil then return end
  if ret == 1 then
   playlist = t[id].Action
   pls_name = t[id].Name
  end
		local t_pls = LoadFromSite(playlist, pls_name, sessionFilmix)
			if not t_pls then m_simpleTV.OSD.ShowMessageT({text = Source.name .. ' - –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞', color = ARGB(255, 255, 0, 0), showTime = 1000 * 5, id = 'channelName'}) return end
		local m3ustr = tvs_core.ProcessFilterTable(UpdateID, Source, t_pls)
		local handle = io.open(m3u_file, 'w+')
			if not handle then return end
		handle:write(m3ustr)
		handle:close()
	 return 'ok'
	end
-- debug_in_file(#t_pls .. '\n')